flowchart TD
start([Start])
n1["""Gera fluxogramas Mermaid em .mmd e .svg a partir de cÃ³digos Python.Percorre arquivos .py em subpastas, identifica funÃ§Ãµes e blocos de decisÃ£o/repetiÃ§Ã£o."""]
start --> n1
n2[function parse_python_file()]
start --> n2
n3["""LÃª e analisa um arquivo Python, retornando seu AST."""]
n2 --> n3
n5[function extract_flow_elements()]
start --> n5
n6["""Extrai elementos do fluxo de controle e decisÃµes."""]
n5 --> n6
n7[elements = []]
n6 --> n7
n8{if (isinstance(node, ast.FunctionDef))}
n7 --> n8
n9[label = f'{indent}function {node.name}()']
n8 --> n9
n10[elements.append(('start', label))]
n9 --> n10
n11((for (node.body)))
n10 --> n11
n12[elements.append((label, 'end'))]
n11 --> n12
n13{else}
n11 --> n13
n14{if (isinstance(node, ast.If))}
n13 --> n14
n15[cond = astor.to_source(node.test).strip().replace('\n', '')]
n14 --> n15
n16[label = f'{indent}if ({cond})']
n15 --> n16
n17[elements.append(('condition', label))]
n16 --> n17
n18((for (node.body)))
n17 --> n18
n19{if (node.orelse)}
n18 --> n19
n20[elements.append(('else', f'{indent}else'))]
n19 --> n20
n21((for (node.orelse)))
n20 --> n21
n22{else}
n21 --> n22
n23{if (isinstance(node, (ast.For, ast.While)))}
n22 --> n23
n24[kind = 'for' if isinstance(node, ast.For) else 'while']
n23 --> n24
n25[cond = astor.to_source(node.iter if kind == 'for' else node.test).strip(    ).replace('\n', '')]
n24 --> n25
n26[label = f'{indent}{kind} ({cond})']
n25 --> n26
n27[elements.append(('loop', label))]
n26 --> n27
n28((for (node.body)))
n27 --> n28
n29{else}
n28 --> n29
n30{if (isinstance(node, ast.Expr))}
n29 --> n30
n31[value = astor.to_source(node).strip().replace('\n', '')]
n30 --> n31
n32[elements.append(('stmt', f'{indent}{value}'))]
n31 --> n32
n33{else}
n30 --> n33
n34{if (isinstance(node, ast.Assign))}
n33 --> n34
n35[assign = astor.to_source(node).strip().replace('\n', '')]
n34 --> n35
n36[elements.append(('stmt', f'{indent}{assign}'))]
n35 --> n36
n38[function generate_mermaid_code()]
start --> n38
n39["""Converte os elementos extraÃ­dos para cÃ³digo Mermaid (fluxograma)."""]
n38 --> n39
n40[mermaid = ['flowchart TD', 'start([Start])']]
n39 --> n40
n41[node_id = 1]
n40 --> n41
n42[previous = 'start']
n41 --> n42
n43[stack = []]
n42 --> n43
n44((for (elements)))
n43 --> n44
n45[cur_id = f'n{node_id}']
n44 --> n45
n46[label_clean = label.strip()]
n45 --> n46
n47{if ((typ == 'condition'))}
n46 --> n47
n48[mermaid.append(f'{cur_id}{{{label_clean}}}')]
n47 --> n48
n49[mermaid.append(f'{previous} --> {cur_id}')]
n48 --> n49
n50[stack.append(cur_id)]
n49 --> n50
n51[previous = cur_id]
n50 --> n51
n52{else}
n47 --> n52
n53{if ((typ == 'else'))}
n52 --> n53
n54[mermaid.append(f'{cur_id}{{{label_clean}}}')]
n53 --> n54
n55[mermaid.append(f'{stack[-1]} --> {cur_id}')]
n54 --> n55
n56[previous = cur_id]
n55 --> n56
n57{else}
n53 --> n57
n58{if ((typ == 'loop'))}
n57 --> n58
n59[mermaid.append(f'{cur_id}(({label_clean}))')]
n58 --> n59
n60[mermaid.append(f'{previous} --> {cur_id}')]
n59 --> n60
n61[stack.append(cur_id)]
n60 --> n61
n62[previous = cur_id]
n61 --> n62
n63{else}
n58 --> n63
n64{if ((typ == 'stmt'))}
n63 --> n64
n65[mermaid.append(f'{cur_id}[{label_clean}]')]
n64 --> n65
n66[mermaid.append(f'{previous} --> {cur_id}')]
n65 --> n66
n67[previous = cur_id]
n66 --> n67
n68{else}
n64 --> n68
n69{if ((typ == 'start'))}
n68 --> n69
n70[mermaid.append(f'{cur_id}[{label_clean}]')]
n69 --> n70
n71[mermaid.append(f'start --> {cur_id}')]
n70 --> n71
n72[previous = cur_id]
n71 --> n72
n73{else}
n69 --> n73
n74{if ((typ == 'end'))}
n73 --> n74
n75[mermaid.append(f'{cur_id}([End])')]
n74 --> n75
n76[mermaid.append(f'{previous} --> {cur_id}')]
n75 --> n76
n77[previous = cur_id]
n76 --> n77
n79[function find_python_files()]
start --> n79
n80["""Retorna todos os caminhos para arquivos .py recursivamente."""]
n79 --> n80
n81[py_files = []]
n80 --> n81
n82((for (os.walk(root_dir))))
n81 --> n82
n83((for (filenames)))
n82 --> n83
n84{if (filename.endswith('.py'))}
n83 --> n84
n85[py_files.append(os.path.join(dirpath, filename))]
n84 --> n85
n87[function save_mermaid_file()]
start --> n87
n88["""Salva cÃ³digo Mermaid em um arquivo .mmd."""]
n87 --> n88
n90[function convert_mermaid_to_svg()]
start --> n90
n91["""Usa o Mermaid CLI para converter .mmd em .svg."""]
n90 --> n91
n93[function main()]
start --> n93
n94[root_dir = '.']
n93 --> n94
n95[py_files = find_python_files(root_dir)]
n94 --> n95
n96((for (py_files)))
n95 --> n96
n97[print(f'ðŸ“„ Processando: {py_file}')]
n96 --> n97
n99{if ((__name__ == '__main__'))}
n97 --> n99
n100[main()]
n99 --> n100