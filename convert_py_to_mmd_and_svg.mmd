graph TD
N0["Func: clean_label()"]
N1["Remove ou substitui caracteres especiais para compatibilidade com Mermaid."]
N0 --> N1
N2["label = re.sub('', '', label)"]
N0 --> N2
N3["label = re.sub('s+', ' ', label)"]
N0 --> N3
N4["Func: extract_mermaid_from_python_code()"]
N5["Gera um fluxograma Mermaid simples a partir de um código Python."]
N4 --> N5
N6["tree = ast.parse(code_str)"]
N4 --> N6
N7["mermaid = 'graph TD'"]
N4 --> N7
N8["node_counter = 0"]
N4 --> N8
N9["Func: new_node()"]
N4 --> N9
N10["label = clean_label(label)"]
N9 --> N10
N11["node_id = f'Nnode_counter'"]
N9 --> N11
N12["mermaid.append(f'node_idlabel')"]
N9 --> N12
N13["Func: walk()"]
N4 --> N13
N14["If: isinstance(node, ast.FunctionDef)"]
N13 --> N14
N15["curr = new_node(f'Func: node.name()')"]
N14 --> N15
N16["If: parent"]
N14 --> N16
N17["mermaid.append(f'parent -- curr')"]
N16 --> N17
N18["For: stmt in node.body"]
N14 --> N18
N19["walk(stmt, curr)"]
N18 --> N19
N20["If: isinstance(node, ast.If)"]
N14 --> N20
N21["cond = new_node(f'If: astor.to_source(node.test).strip()')"]
N20 --> N21
N22["If: parent"]
N20 --> N22
N23["mermaid.append(f'parent -- cond')"]
N22 --> N23
N24["For: stmt in node.body"]
N20 --> N24
N25["walk(stmt, cond)"]
N24 --> N25
N26["For: stmt in node.orelse"]
N20 --> N26
N27["walk(stmt, cond)"]
N26 --> N27
N28["If: isinstance(node, ast.For)"]
N20 --> N28
N29["target = astor.to_source(node.target).strip()"]
N28 --> N29
N30["it = astor.to_source(node.iter).strip()"]
N28 --> N30
N31["loop = new_node(f'For: target in it')"]
N28 --> N31
N32["If: parent"]
N28 --> N32
N33["mermaid.append(f'parent -- loop')"]
N32 --> N33
N34["For: stmt in node.body"]
N28 --> N34
N35["walk(stmt, loop)"]
N34 --> N35
N36["If: isinstance(node, ast.While)"]
N28 --> N36
N37["test = astor.to_source(node.test).strip()"]
N36 --> N37
N38["loop = new_node(f'While: test')"]
N36 --> N38
N39["If: parent"]
N36 --> N39
N40["mermaid.append(f'parent -- loop')"]
N39 --> N40
N41["For: stmt in node.body"]
N36 --> N41
N42["walk(stmt, loop)"]
N41 --> N42
N43["If: isinstance(node, ast.Expr)"]
N36 --> N43
N44["label = astor.to_source(node).strip()"]
N43 --> N44
N45["expr = new_node(label)"]
N43 --> N45
N46["If: parent"]
N43 --> N46
N47["mermaid.append(f'parent -- expr')"]
N46 --> N47
N48["If: isinstance(node, ast.Assign)"]
N43 --> N48
N49["label = astor.to_source(node).strip()"]
N48 --> N49
N50["assign = new_node(label)"]
N48 --> N50
N51["If: parent"]
N48 --> N51
N52["mermaid.append(f'parent -- assign')"]
N51 --> N52
N53["For: n in tree.body"]
N4 --> N53
N54["walk(n)"]
N53 --> N54
N55["Func: process_all_py_files()"]
N56["Busca todos os arquivos .py a partir da raiz e gera um .mmd e .svg para cada um."]
N55 --> N56
N57["For: (dirpath, _, filenames) in os.walk('.')"]
N55 --> N57
N58["For: filename in filenames"]
N57 --> N58
N59["If: filename.endswith('.py')"]
N58 --> N59
N60["full_path = os.path.join(dirpath, filename)"]
N59 --> N60
N61["base_name = os.path.splitext(filename)0"]
N59 --> N61
N62["mmd_path = os.path.join(dirpath, f'base_name.mmd')"]
N59 --> N62
N63["svg_path = os.path.join(dirpath, f'base_name.svg')"]
N59 --> N63
N64["print(f'✔️ mmd_path gerado.')"]
N59 --> N64
N65["If: (__name__ == '__main__')"]
N66["process_all_py_files()"]
N65 --> N66