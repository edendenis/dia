flowchart TD
start([Start])
n1[function should_process_directory()]
start --> n1
n2["""    Verifica se o diretório deve ser processado, ignorando diretórios ocultos e .git.        :param dirpath: Caminho do diretório a ser verificado    :return: True se o diretório deve ser processado, False caso contrário    """]
n1 --> n2
n4[function contains_readme_or_git()]
start --> n4
n5["""    Verifica se o diretório contém um arquivo README ou um diretório .git.        :param dirpath: Caminho do diretório a ser verificado    :return: True se o diretório contém README ou .git, False caso contrário    """]
n4 --> n5
n6((for (os.listdir(dirpath))))
n5 --> n6
n7{if ((item.lower().startswith('readme') or item == '.git'))}
n6 --> n7
n9[function copy_files_to_non_empty_dir()]
start --> n9
n10["""    Copia arquivos especificados para subpastas dos diretórios alvo que possuem pelo menos um arquivo README ou um diretório .git.    Adiciona a data de modificação da pasta que está recebendo os arquivos ao arquivo CHANGES.txt se ele não existir.    Exclui arquivos copiados para subsubpastas.        :param template_dir: Diretório que contém os arquivos e pastas a serem copiados    :param source_files: Lista de arquivos e/ou pastas para copiar    :param target_roots: Lista de diretórios raiz onde as cópias serão feitas    """]
n9 --> n10
n11((for (target_roots)))
n10 --> n11
n12[program_dirs = []]
n11 --> n12
n13((for (os.walk(target_root))))
n12 --> n13
n14{if (should_process_directory(dirpath))}
n13 --> n14
n15{if (contains_readme_or_git(dirpath))}
n14 --> n15
n16[print(f"""Processing folder: {dirpath}""")]
n15 --> n16
n17[program_dirs.append(dirpath)]
n16 --> n17
n18((for (source_files)))
n17 --> n18
n19[item_path = os.path.join(template_dir, item)]
n18 --> n19
n20[target_item_path = os.path.join(dirpath, os.path.basename(item))]
n19 --> n20
n21{if (os.path.isfile(item_path))}
n20 --> n21
n22{if ((os.path.basename(item_path) in ['.gitignore', '.gitattributes']))}
n21 --> n22
n23[shutil.copy(item_path, dirpath)]
n22 --> n23
n24[print(f'File {item} copied to {dirpath}')]
n23 --> n24
n25{else}
n22 --> n25
n26{if ((not os.path.exists(target_item_path)))}
n25 --> n26
n27[shutil.copy(item_path, dirpath)]
n26 --> n27
n28[print(f'File {item} copied to {dirpath}')]
n27 --> n28
n29{else}
n26 --> n29
n30{if (os.path.isdir(item_path))}
n29 --> n30
n31{if ((not os.path.exists(target_item_path)))}
n30 --> n31
n32[shutil.copytree(item_path, target_item_path, dirs_exist_ok=True)]
n31 --> n32
n33[print(f'Folder {item} copied to {dirpath}')]
n32 --> n33
n34[update_changes_file_if_not_exists(dirpath)]
n33 --> n34
n35((for (os.walk(target_root))))
n34 --> n35
n36{if ((dirpath not in program_dirs and should_process_directory(dirpath)))}
n35 --> n36
n37((for (source_files)))
n36 --> n37
n38[item_name = os.path.basename(item)]
n37 --> n38
n39[target_item_path = os.path.join(dirpath, item_name)]
n38 --> n39
n40{if ((os.path.isfile(target_item_path) and not os.path.basename(target_item_path    ) in ['.gitignore', '.gitattributes']))}
n39 --> n40
n41[os.remove(target_item_path)]
n40 --> n41
n42[print(f'Removed file {target_item_path}')]
n41 --> n42
n43{else}
n40 --> n43
n44{if (os.path.isdir(target_item_path))}
n43 --> n44
n45[shutil.rmtree(target_item_path)]
n44 --> n45
n46[print(f'Removed folder {target_item_path}')]
n45 --> n46
n48[function update_changes_file_if_not_exists()]
start --> n48
n49["""    Cria o arquivo CHANGES.txt com a data de modificação do diretório se ele não existir.        :param dirpath: Diretório cujo arquivo CHANGES.txt será criado    """]
n48 --> n49
n50[changes_file_path = os.path.join(dirpath, 'CHANGES.txt')]
n49 --> n50
n51{if ((not os.path.exists(changes_file_path)))}
n50 --> n51
n52[mod_time = os.path.getmtime(dirpath)]
n51 --> n52
n53[mod_date = datetime.fromtimestamp(mod_time).strftime('%d/%m/%Y')]
n52 --> n53
n54{else}
n51 --> n54
n55[print(f'CHANGES.txt already exists in {dirpath}, not modified.')]
n54 --> n55
n57[template_dir = 'TEMPLATE']
n55 --> n57
n58[source_files = ['figures', '.gitattributes', '.gitignore', 'CHANGES.txt',    'copy_files_to_non_empty_dirs.py', 'convert_md_to_ipynb_and_py.py',    'convert_ipynb_to_md_and_py.py', 'LICENSE.txt']]
n57 --> n58
n59[target_roots = ['android', 'debian', 'mac_os', 'ubuntu']]
n58 --> n59
n60[copy_files_to_non_empty_dir(template_dir, source_files, target_roots)]
n59 --> n60