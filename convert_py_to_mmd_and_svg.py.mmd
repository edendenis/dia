flowchart TD
n0["Func: clean_label"]
n1["Remove caracteres especiais e simplifica labels"]
n0 --> n1
n2["label = resubws:=><-+*/ label"]
n1 --> n2
n3["label = resubs+ label"]
n2 --> n3
n4["Func: generate_mermaid_from_ast"]
n5["Gera código Mermaid flowchart a partir de código Python"]
n4 --> n5
n6["tree = astparsecode_str"]
n5 --> n6
n7["lines = flowchart TD"]
n6 --> n7
n8["node_counter = 0"]
n7 --> n8
n9["Func: new_node"]
n8 --> n9
n10["node_id = fnnode_counter"]
n9 --> n10
n11["label = clean_labellabel"]
n10 --> n11
n12{"If: shape == diamond"}
n11 --> n12
n13["linesappendfnode_idlabel"]
n12 --> n13
n14{"If: shape == parallelogram"}
n12 --> n14
n15["linesappendfnode_id/label/"]
n14 --> n15
n16["linesappendfnode_idlabel"]
n14 --> n16
n17["Func: walk"]
n9 --> n17
n18{"If: isinstancenode astFunctionDef"}
n17 --> n18
n19["current = new_nodefFunc: nodename rect"]
n18 --> n19
n20{"If: parent"}
n18 --> n20
n21["linesappendfparent --> current"]
n20 --> n21
n22["last = current"]
n18 --> n22
n23{"For: stmt in nodebody"}
n18 --> n23
n24["last = walkstmt last"]
n23 --> n24
n25{"If: isinstancenode astIf"}
n18 --> n25
n26["cond = new_nodefIf: astorto_sourcenodeteststrip diamond"]
n25 --> n26
n27{"If: parent"}
n25 --> n27
n28["linesappendfparent --> cond"]
n27 --> n28
n29["last_true = cond"]
n25 --> n29
n30{"For: stmt in nodebody"}
n25 --> n30
n31["last_true = walkstmt cond"]
n30 --> n31
n32["last_false = cond"]
n25 --> n32
n33{"For: stmt in nodeorelse"}
n25 --> n33
n34["last_false = walkstmt cond"]
n33 --> n34
n35{"If: isinstancenode astWhile"}
n25 --> n35
n36["cond = new_nodefWhile: astorto_sourcenodeteststrip diamond"]
n35 --> n36
n37{"If: parent"}
n35 --> n37
n38["linesappendfparent --> cond"]
n37 --> n38
n39{"For: stmt in nodebody"}
n35 --> n39
n40["walkstmt cond"]
n39 --> n40
n41{"If: isinstancenode astFor"}
n35 --> n41
n42["label = fFor: astorto_sourcenodetargetstrip in astorto_sourcenodeiterstrip"]
n41 --> n42
n43["loop = new_nodelabel diamond"]
n41 --> n43
n44{"If: parent"}
n41 --> n44
n45["linesappendfparent --> loop"]
n44 --> n45
n46{"For: stmt in nodebody"}
n41 --> n46
n47["walkstmt loop"]
n46 --> n47
n48{"If: isinstancenode astAssign"}
n41 --> n48
n49["assign = new_nodeastorto_sourcenodestrip rect"]
n48 --> n49
n50{"If: parent"}
n48 --> n50
n51["linesappendfparent --> assign"]
n50 --> n51
n52{"If: isinstancenode astExpr"}
n48 --> n52
n53["expr = new_nodeastorto_sourcenodestrip rect"]
n52 --> n53
n54{"If: parent"}
n52 --> n54
n55["linesappendfparent --> expr"]
n54 --> n55
n56{"For: n in treebody"}
n17 --> n56
n57["walkn"]
n56 --> n57
n58["Func: process_python_file"]
n59["printf Processando: file_path"]
n58 --> n59
n60["Func: find_python_files"]
n61["py_files ="]
n60 --> n61
n62{"For: dirpath _ filenames in oswalkroot"}
n61 --> n62
n63{"For: file in filenames"}
n62 --> n63
n64{"If: fileendswithpy"}
n63 --> n64
n65["py_filesappendospathjoindirpath file"]
n64 --> n65
n66{"If: __name__ == __main__"}
n67["print Procurando arquivos py"]
n66 --> n67
n68["py_files = find_python_files"]
n66 --> n68
n69{"For: py_file in py_files"}
n66 --> n69
n70["process_python_filepy_file"]
n69 --> n70